1.数组的常用方法：
    + 增加，删除和替换
        + push() 数组末尾增加一项
        + pop() 数组末尾删除一项
        + shift() 数组开头删除一项
        + unshift() 数组开头增加一项
        + splice()
            + 增加 splice(index,0,要增加的内容)；要增加的内容插入到了索引的前面
            + 删除 splice(index,xxxxx);如果第二个参数不写，就从索引一直删除到结尾；
            返回值：被删除的内容，以一个新数组的形式返回
            + 替换 splice(index,n,m)从第几个开始删除n个，替换为m的新内容
    + 查找，数组拼接
        + slice(n,m) 包前不包后
        + concat()数组拼接
    + 数组转字符串
        + toString() 以逗号形式分割的字符串
        + join(拼接形式) 配合eval() 实现数学运算
        eval():把字符串作为JS代码来执行
    + 翻转和排序
        + reverse()
        + sort(function(n,m){return n-m})
    + 数组常用但不兼容的方法
        + indexOf()
        + forEach()
        + map();
2. 算法：核心-》思路
    - 快排
    var ary=[18,2,13,42,9,16]
    1. 先找到中间的位置；然后通过位置找到中间的值；13
    2. 拿数组中的每一项，跟13进行比较；比他大的，放right[]; 比他小的放left[];
    3. 停止拆分的条件：数组的长度小于等于1；
    **递归：函数自己调用自己；**
    - 插排
    [18,2,13,42,9,16]
    left[2,9,13,16,18,42]  right[,,,,]
        + 先创建一个left数组，里面放一个left[18];
        + 遍历右手中的每张牌，分别跟左手的数组从后往前的比较
            + 如果比左手的排大；放入到他的下一项的前面；此轮比较结束；
            + 如果比左手的排小，继续往前比较，比到开头还小的话，插入数组的第一项；

    - 冒排
    - 去重：n种方法
=====================
1. 数组常用的方法14个
2. 插入排序 和  快速排序
3. 选项卡（自定义属性+闭包）
4. 99乘法表
5. 验证码(for while)
6. 数据类型：
    + 基本数据类型：字符串string ,数字number, 布尔boolean， null ,undefined
    + 引用数据类型
        + 对象数据类型：数组，正则，对象等
        + 函数数据类型
7. 任意个参数求和；
======================




























